Функция ПолучитьДатуначалаЗагрузкиКурсов(СписокВалют)
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Валюта",СписокВалют);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта В (&Валюта)) КАК КурсыВалютСрезПоследних";
	Выборка = Запрос.Выполнить().Выгрузить();
	ДатаНач='21001231235959';
	Для Каждого Стр из Выборка Цикл
		
		ДатаНач=Мин(ДатаНач,Стр.Период);
	КонецЦикла;	
	ДатаНач=НачалоДня(ДатаНач)+86400;
	Возврат ДатаНач;
КонецФункции // ПолучитьПериодЗагрузки()

Функция ПолучитьСписокВалют()
	
	МассиВалют=Новый Массив;
	СправочникВалюты = Справочники.Валюты;
	ВыборкаВалют = СправочникВалюты.Выбрать();
	МакетОКВ = Справочники.Валюты.ПолучитьМакет("КлассификаторВалют");
	ОбластьКоды = МакетОКВ.Область("КодЧисловой");
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Пока ВыборкаВалют.Следующий() Цикл
		ТекущаяВалюта = ВыборкаВалют.Ссылка;
		
		Если ЗначениеЗаполнено(ТекущаяВалюта.БазоваяВалюта) Тогда
			Продолжить;
		КонецЕсли;	
		
		КодТекущейВалюты = СокрЛП(ТекущаяВалюта.Код);
		НайденнаяОбласть = МакетОКВ.НайтиТекст(КодТекущейВалюты,,ОбластьКоды);
		Если НайденнаяОбласть = Неопределено ИЛИ НайденнаяОбласть.Верх=2 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТекущаяВалюта = мВалютаРегламентированногоУчета Тогда
			Продолжить;
		КонецЕсли;
		
		МассиВалют.Добавить(ТекущаяВалюта);
	КонецЦикла;	
	
	Возврат МассиВалют;
	
КонецФункции	

Функция ПолучитьСписокПодчиненныхВалют(ТекВалюта)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("БазоваяВалюта",ТекВалюта);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.БазоваяВалюта = &БазоваяВалюта
	|	И Валюты.Ссылка <> &БазоваяВалюта";	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

// По загруженному курсу базовой валюты пересчитываем курсы подчиненных валют
Процедура ПересчитатьКурсыПодчиненныхВалют(БазоваяВалюта, ДатаКурса, БазовыйКурс, БазоваяКратность, СписокПодчиненныхВалют)
	
	СправочникВалюты	= Справочники.Валюты;
	РегистрКурсыВалют	= РегистрыСведений.КурсыВалют;
	ЗаписьКурсовВалют	= РегистрКурсыВалют.СоздатьМенеджерЗаписи();
	
	Для Каждого строкаВалюты из СписокПодчиненныхВалют Цикл
		
		ТекВалюта	= строкаВалюты.Ссылка;
		
		Курс		= БазовыйКурс * (1 + ТекВалюта.ПроцентИзмененияКурса / 100);
		Курс		= ?(ТекВалюта.НижняяГраницаКурса <> 0, Макс(ТекВалюта.НижняяГраницаКурса, Курс), Курс);
		Курс		= ?(ТекВалюта.ВерхняяГраницаКурса <> 0, Мин(ТекВалюта.ВерхняяГраницаКурса, Курс), Курс);
		
		Кратность	= БазоваяКратность;		
		ЗаписьКурсовВалют.Валюта = ТекВалюта;
		ЗаписьКурсовВалют.Период = ДатаКурса;
		ЗаписьКурсовВалют.Прочитать();
		ЗаписьКурсовВалют.Валюта    = ТекВалюта;
		ЗаписьКурсовВалют.Период    = ДатаКурса;
		ЗаписьКурсовВалют.Курс      = Курс;
		ЗаписьКурсовВалют.Кратность = Кратность;
		ЗаписьКурсовВалют.Записать();
		
		
		ПересчитатьКурсыПодчиненныхВалют(ТекВалюта, ДатаКурса, Курс, Кратность, ПолучитьСписокПодчиненныхВалют(ТекВалюта));
		
	КонецЦикла
	
КонецПроцедуры


// Загружает информацию о курсе валюты Валюта из файла ПутьКФайлу в регистр
// сведений курсов валют. При этом файл с курсами разбирается, и записываются
// только те данные, которые удовлетворяют периоду (НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки).
//
Функция ЗагрузитьКурсВалютыИзФайла(Знач Валюта, Знач ПутьКФайлу, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки)
	
	СтатусЗагрузки = 1;
	
	ЧислоЗагружаемыхДнейВсего = 1 + (ОкончаниеПериодаЗагрузки - НачалоПериодаЗагрузки) / ( 24 * 60 * 60);
	
	ЧислоЗагруженныхДней = 0;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПутьКФайлу);
		ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьКФайлу;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	
	
	Текст.Прочитать(ИмяФайла, КодировкаТекста.ANSI);
	
	ДатаЗапрета = Неопределено;
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки);
		Если (Стр = "") ИЛИ (Найти(Стр, Символы.Таб) = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиСтроки = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(Стр, Символы.Таб);
		//ЧастиСтроки = СтрРазделить(Стр, Символы.Таб, Истина);
		
		Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
			ДатаКурса = ОкончаниеПериодаЗагрузки;
			Кратность = Число(ЧастиСтроки[0]);
			Курс = Число(ЧастиСтроки[1]);
		Иначе
			ДатаКурсаСтр = ЧастиСтроки[0];
			ДатаКурса = Дата(Лев(ДатаКурсаСтр,4), Сред(ДатаКурсаСтр,5,2), Сред(ДатаКурсаСтр,7,2));
			Кратность = Число(ЧастиСтроки[1]);
			Курс = Число(ЧастиСтроки[2]);
		КонецЕсли;
		
		Если ДатаКурса > ОкончаниеПериодаЗагрузки Тогда
			Прервать;
		КонецЕсли;
		
		Если ДатаКурса < НачалоПериодаЗагрузки Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период = ДатаКурса;
		Запись.Курс = Курс;
		Запись.Кратность = Кратность;
		
		Записывать = Истина;
		//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		//	МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
		//	Если МодульДатыЗапретаИзмененияСлужебный.ЗапретИзмененияПроверяется(Метаданные.РегистрыСведений.КурсыВалют) Тогда
		//		МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
		//		Записывать = Не МодульДатыЗапретаИзменения.ИзменениеЗапрещено(НаборЗаписей);
		//		Если Не Записывать Тогда
		//			Если ДатаЗапрета = Неопределено Тогда
		//				ДатаЗапрета = ДатаКурса;
		//			Иначе
		//				ДатаЗапрета = Макс(ДатаЗапрета, ДатаКурса);
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Записывать Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
		ПересчитатьКурсыПодчиненныхВалют(Валюта, ДатаКурса, Курс, Кратность,ПолучитьСписокПодчиненныхВалют(Валюта));
		
		ЧислоЗагруженныхДней = ЧислоЗагруженныхДней + 1;
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПутьКФайлу) Тогда
		УдалитьФайлы(ИмяФайла);
		УдалитьИзВременногоХранилища(ПутьКФайлу);
	КонецЕсли;
	
	ПояснениеОЗагрузке = "";
	Если ЧислоЗагружаемыхДнейВсего <> ЧислоЗагруженныхДней Тогда
		Если ЧислоЗагруженныхДней = 0 Тогда
			ПояснениеОЗагрузке = НСтр("ru = 'Курсы валюты %1 (%2) не загружены.
				|Нет сведение о курсе за указанный период.'");
		Иначе
			ПояснениеОЗагрузке = НСтр("ru = 'Загружены не все курсы по валюте %1 (%2).'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПояснениеОЗагрузке) Тогда
		ПояснениеОЗагрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПояснениеОЗагрузке, Валюта.Наименование, Валюта.Код);
	КонецЕсли;
	
	Если ДатаЗапрета <> Неопределено Тогда
		ПояснениеОЗагрузке = ПояснениеОЗагрузке + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загрузка курсов валюты %1(%2) ограничена датой запрета изменений %3.
			|Курсы запрещенного периода были пропущены при загрузке.'"), Валюта.Наименование, Валюта.Код, Формат(ДатаЗапрета, "ДЛФ=D"));
	КонецЕсли;
	
	ПояснениеОЗагрузке = СокрЛП(ПояснениеОЗагрузке);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	СписокОшибок = Новый Массив;
	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		СписокОшибок.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОшибок);
	
	итСтрока = "";
	Для Каждого СтрМ из СписокОшибок Цикл
		итСтрока=итСтрока+"
						  |"+СтрМ;
	конецЦикла;	
	ПояснениеОЗагрузке = ПояснениеОЗагрузке + ?(ПустаяСтрока(ПояснениеОЗагрузке), "", Символы.ПС) + итСтрока;
	
	Возврат ПояснениеОЗагрузке;
	
КонецФункции


Функция ПараметрыАутентификацииНаСайте()
	Результат = Новый Структура;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
	//	МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	//	ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	//	Если ДанныеАутентификации <> Неопределено Тогда
	//Результат.Вставить("Пользователь", ВосстановитьЗначение("КодДоступаНаСервер"));
	//Результат.Вставить("Пароль", ВосстановитьЗначение("ПарольДоступаНаСервер"));
	Результат.Вставить("Пользователь", "");
	Результат.Вставить("Пароль", "");
	
	//	КонецЕсли;
	//КонецЕсли;
	//
	а=1;
	//ВосстановитьЗначение("КодДоступаНаСервер");
	//ВосстановитьЗначение("ПарольДоступаНаСервер")
	//
	Возврат Результат;
КонецФункции


// Процедура для загрузки курсов валют по определенному периоду.
//
// Параметры:
// Валюты		- Любая коллекция - со следующими полями:
//					КодВалюты - числовой код валюты.
//					Валюта - ссылка на валюту.
// НачалоПериодаЗагрузки	- Дата - начало периода загрузки курсов.
// ОкончаниеПериодаЗагрузки	- Дата - окончание периода загрузки курсов.
//
// Возвращаемое значение:
// Массив состояния загрузки  - каждый элемент - структура с полями.
//		Валюта - загружаемая валюта.
//		СтатусОперации - завершилась ли загрузка успешно.
//		Сообщение - пояснение о загрузке (текст сообщения об ошибке или поясняющее сообщение).
//
Функция ЗагрузитьКурсыВалютПоПараметрам(Знач Валюты, Знач НачалоПериодаЗагрузки, Знач ОкончаниеПериодаЗагрузки, ПриЗагрузкеВозниклиОшибки = Ложь)
	
	СостояниеЗагрузки = Новый Массив;
	
	ПараметрыПолучения = Неопределено;
	ИмяФайлаДневногоКурса = Формат(ОкончаниеПериодаЗагрузки, "ДФ=/yyyy/MM/dd");
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	//СерверИсточник = "https://currencyrates.1c.ru/exchangerate/v1";
	//Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
	//	ШаблонИмениФайла = СерверИсточник + "/%1" + ИмяФайлаДневногоКурса + ".tsv";
	//Иначе
	//	ШаблонИмениФайла = СерверИсточник + "/%1.tsv";
	//КонецЕсли;
	
	
	СерверИсточник = "http://cbrates.rbc.ru";
	Если НачалоПериодаЗагрузки = ОкончаниеПериодаЗагрузки Тогда
		ШаблонИмениФайла = СерверИсточник + "/tsv/%1" + ИмяФайлаДневногоКурса + ".tsv";
	Иначе
		ШаблонИмениФайла = СерверИсточник + "/tsv/cb/%1.tsv";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПолучения = ПараметрыАутентификацииНаСайте();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Валюта Из Валюты Цикл
		ФайлНаВебСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, Валюта.Код);
		Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
		
		Если Результат.Статус Тогда
			ПоясняющееСообщение = ЗагрузитьКурсВалютыИзФайла(Валюта, Результат.Путь, НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) + Символы.ПС;
			УдалитьФайлы(Результат.Путь);
			СтатусОперации = ПустаяСтрока(ПоясняющееСообщение);
		Иначе
			ПоясняющееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно получить файл данных с курсами валюты (%1 - %2):
					|%3
					|Возможно, нет доступа к веб сайту с курсами валют, либо указана несуществующая валюта.'"),
				Валюта.Код,
				Валюта.Наименование,
				Результат.СообщениеОбОшибке);
			СтатусОперации = Ложь;
			ПриЗагрузкеВозниклиОшибки = Истина;
		КонецЕсли;
		СостояниеЗагрузки.Добавить(Новый Структура("Валюта,СтатусОперации,Сообщение", Валюта, СтатусОперации, ПоясняющееСообщение));
		
	КонецЦикла;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

Процедура ЗагрузитьКурсыВалютНаСервере() Экспорт
	МассиВалют=ПолучитьСписокВалют();
	ДатаНач = ПолучитьДатуначалаЗагрузкиКурсов(ПолучитьСписокВалют());
	ДатаКон = НачалоДня(ТекущаяДата())+86400;
	ЕстьОшибки=Ложь;
	ЗагрузитьКурсыВалютПоПараметрам(МассиВалют,ДатаНач,ДатаКон,ЕстьОшибки);
КонецПроцедуры	